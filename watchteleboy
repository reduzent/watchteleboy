#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from wt_classes import *
from wt_helpers import *


def main():
    defaults = {
        'wt_dir': '{home_dir}/.watchteleboy',
        'configfile': '{wt_dir}/config',
        'session_cache': '{wt_dir}/session_cache',
        'mpv_opts': '--keep-open',
        'channel_selection': 'all',
        'record_dir': '{wt_dir}',
        'max_bitrate': '4800000',
        'fifo': '{wt_dir}/{wt_instance}_{content_type}_{id}',
        'mpv': '/usr/bin/mpv',
        'mpv_args': [
            '--keep-open',
            '--force-seekable=yes',
            '--cache=yes',
            '--cache-secs=600',
            '--demuxer-max-bytes=1GiB',
        ]
    }

    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--list", help="list available channels", action="store_true")
    parser.add_argument("-c", "--channel", help="play channel")
    parser.add_argument("--print-url", help="print url of channel instead of starting playback", action="store_true")
    parser.add_argument("-t", "--starttime", help="specify a start time other than 'now'")
    args = parser.parse_args()

    env = create_env(defaults)

    wts = WatchTeleboySession(env['session_cache'])
    if not wts.logged_in():
        try:
            assert wts.login(user=env['teleboy_user'], password=env['teleboy_pass'])
        except AssertionError:
            sys.exit(1)
    wts.set_channel_selection(env['channel_selection'])
    if args.list:
        wts.list_channels()
        sys.exit(0)
    ch = args.channel if args.channel else 'SRF1'
    mpd_url = wts.get_stream_url(ch)
    if args.print_url:
        print(mpd_url)
        sys.exit(0)
    wt_container = WatchTeleboyStreamContainer(mpd_url)
    wt_video = wt_container.extract_video_stream()
    wt_audio = wt_container.extract_audio_stream()
    audio_fifo = env['fifo'].format(content_type=wt_audio.content_type, id=wt_audio.id)
    video_fifo = env['fifo'].format(content_type=wt_video.content_type, id=wt_video.id)
    os.mkfifo(audio_fifo)
    os.mkfifo(video_fifo)
    if args.starttime:
        stobj = parse_time_string(args.starttime)
        wt_audio.set_start_time(stobj)
        wt_video.set_start_time(stobj)
    wt_audio.start_download(audio_fifo)
    wt_video.start_download(video_fifo)
    mpv_command = [env['mpv'], *env['mpv_args'], f'--title={ch}', f'--audio-file={audio_fifo}', video_fifo]
    mpv = subprocess.Popen(mpv_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    try:
        mpv.wait()
    except KeyboardInterrupt:
        pass
    wt_video.stop()
    wt_audio.stop()
    os.unlink(audio_fifo)
    os.unlink(video_fifo)
    sys.exit()

if __name__ == '__main__':
    main()

