#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
from wt_classes import *
from wt_helpers import *

defaults = {
    'wt_dir': '{home_dir}/.watchteleboy',
    'configfile': '{wt_dir}/config',
    'session_cache': '{wt_dir}/session_cache',
    'mpv_opts': '--keep-open',
    'channel_selection': 'all',
    'record_dir': '{wt_dir}',
    'max_bitrate': '4800000',
    'fifo': '{wt_dir}/{wt_instance}_{content_type}_{id}'
}

env = create_env(defaults)

VIDEO_OUTPUT_FILE = 'v'
AUDIO_OUTPUT_FILE = 'a'
MPV_COMMAND = '/usr/bin/mpv'
MPV_ARGS = ['--keep-open', '--force-seekable=yes', '--cache=yes', f'--audio-file={AUDIO_OUTPUT_FILE}', VIDEO_OUTPUT_FILE]

parser = argparse.ArgumentParser()
parser.add_argument("-l", "--list", help="list available channels", action="store_true")
parser.add_argument("-c", "--channel", help="play channel")
parser.add_argument("--print-url", help="print url of channel instead of starting playback", action="store_true")
parser.add_argument("-t", "--starttime", help="specify a start time other than 'now'")
args = parser.parse_args()

def main(args):
    wts = WatchTeleboySession(env['session_cache'])
    if not wts.logged_in():
        try:
            assert wts.login(user=env['teleboy_user'], password=env['teleboy_pass'])
        except AssertionError:
            sys.exit(1)

    if args.list:
        wts.list_channels()
        sys.exit(0)

    ch = args.channel if args.channel else 'SRF1'
    mpd_url = wts.get_stream_url(ch)

    if args.print_url:
        print(mpd_url)
        sys.exit(0)

    wt_container = WatchTeleboyStreamContainer(mpd_url)
    wt_video = wt_container.extract_video_stream()
    wt_audio = wt_container.extract_audio_stream()
    os.mkfifo(VIDEO_OUTPUT_FILE)
    os.mkfifo(AUDIO_OUTPUT_FILE)

    if args.starttime:
        stobj = parse_time_string(args.starttime)
        wt_video.set_start_time(stobj)
        wt_audio.set_start_time(stobj)

    MPV_ARGS.insert(0, MPV_COMMAND)
    mpv = subprocess.Popen(MPV_ARGS, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    wt_video.nb_download_stream(VIDEO_OUTPUT_FILE)
    wt_audio.nb_download_stream(AUDIO_OUTPUT_FILE)

    mpv.wait()
    wt_video.stop()
    wt_audio.stop()
    os.unlink(VIDEO_OUTPUT_FILE)
    os.unlink(AUDIO_OUTPUT_FILE)
    sys.exit()

if __name__ == '__main__':
    main(args)

